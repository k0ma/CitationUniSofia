// <auto-generated />
using System;
using CitationUniSofia.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CitationUniSofia.Data.Migrations
{
    [DbContext(typeof(CitationUniSofiaContext))]
    [Migration("20190922113518_LinkingTable_AuthorInstitution")]
    partial class LinkingTable_AuthorInstitution
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CitationUniSofia.Data.Model.AreaScience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FieldScienceId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("FieldScienceId");

                    b.ToTable("AreasScience");
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternativeName");

                    b.Property<string>("AuthorIdentifier");

                    b.Property<string>("AuthorIdentifier1");

                    b.Property<string>("AuthorInstitutionId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("TransliterationName");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.AuthorInstitution", b =>
                {
                    b.Property<int>("AuthorId");

                    b.Property<int>("InstitutionId");

                    b.Property<int>("Id");

                    b.HasKey("AuthorId", "InstitutionId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("AuthorsInstitutions");
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.Citation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId");

                    b.Property<int>("CitationTypeId");

                    b.Property<string>("Detail");

                    b.Property<string>("Detail1");

                    b.Property<int>("InstitutionId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Name1");

                    b.Property<string>("Pages");

                    b.Property<int>("Sequence");

                    b.Property<string>("Year");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CitationTypeId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Citations");
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.CitationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("CitationTypes");
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.CitationUniSofiaUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.FieldScience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnglishName");

                    b.Property<string>("EnglishName1");

                    b.Property<string>("FieldScienceIdentifier");

                    b.Property<string>("FieldScienceIdentifier1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Name1");

                    b.HasKey("Id");

                    b.ToTable("FieldsSciences");
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("AlternativeName");

                    b.Property<string>("AlternativeName1");

                    b.Property<string>("Identifier");

                    b.Property<string>("Identifier1");

                    b.Property<int>("InstitutionTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Name1");

                    b.Property<string>("TransliterationAddress");

                    b.Property<string>("TransliterationName");

                    b.Property<string>("TransliterationName1");

                    b.Property<string>("WWW");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionTypeId");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.InstitutionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("InstitutionsTypes");
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.Metadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Metadata");
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternativeIndexedResource");

                    b.Property<string>("AlternativeIndexedResource1");

                    b.Property<int>("AuthorId");

                    b.Property<int>("CountryId");

                    b.Property<string>("Detail");

                    b.Property<string>("ISSN");

                    b.Property<string>("IndexedResource");

                    b.Property<string>("IndexedResource1");

                    b.Property<int>("InstitutionId");

                    b.Property<int>("LanguageId");

                    b.Property<int>("PublicationTypeId");

                    b.Property<string>("Summary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Title1");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CountryId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PublicationTypeId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.PublicationAreaScience", b =>
                {
                    b.Property<int>("PublicationId");

                    b.Property<int>("AreaScienceId");

                    b.Property<int>("Id");

                    b.Property<int>("Sequence");

                    b.HasKey("PublicationId", "AreaScienceId");

                    b.HasIndex("AreaScienceId");

                    b.ToTable("PublicationsAreasScience");
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.PublicationCitation", b =>
                {
                    b.Property<int>("PublicationId");

                    b.Property<int>("CitationId");

                    b.Property<int>("Id");

                    b.Property<int>("Sequence");

                    b.HasKey("PublicationId", "CitationId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("CitationId");

                    b.ToTable("PublicationsCitations");
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.PublicationMetadata", b =>
                {
                    b.Property<int>("PublicationId");

                    b.Property<int>("MetadataId");

                    b.Property<int>("Id");

                    b.Property<int>("Sequence");

                    b.HasKey("PublicationId", "MetadataId");

                    b.HasIndex("MetadataId");

                    b.ToTable("PublicationsMetadata");
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.PublicationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("PublicationTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.AreaScience", b =>
                {
                    b.HasOne("CitationUniSofia.Data.Model.FieldScience", "FieldScience")
                        .WithMany("AreasScience")
                        .HasForeignKey("FieldScienceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.AuthorInstitution", b =>
                {
                    b.HasOne("CitationUniSofia.Data.Model.Author", "Author")
                        .WithMany("AuthorsInstitutions")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CitationUniSofia.Data.Model.Institution", "Institution")
                        .WithMany("AuthorsInstitutions")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.Citation", b =>
                {
                    b.HasOne("CitationUniSofia.Data.Model.Author", "Author")
                        .WithMany("Citations")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CitationUniSofia.Data.Model.CitationType", "CitationType")
                        .WithMany("Citations")
                        .HasForeignKey("CitationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CitationUniSofia.Data.Model.Institution", "Institution")
                        .WithMany("Citations")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.Institution", b =>
                {
                    b.HasOne("CitationUniSofia.Data.Model.InstitutionType", "InstitutionType")
                        .WithMany("Institutions")
                        .HasForeignKey("InstitutionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.Publication", b =>
                {
                    b.HasOne("CitationUniSofia.Data.Model.Author", "Author")
                        .WithMany("Publications")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CitationUniSofia.Data.Model.Country", "Country")
                        .WithMany("Publications")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CitationUniSofia.Data.Model.Institution", "Institution")
                        .WithMany("Publications")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CitationUniSofia.Data.Model.Language", "Language")
                        .WithMany("Publications")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CitationUniSofia.Data.Model.PublicationType", "PublicationType")
                        .WithMany("Publications")
                        .HasForeignKey("PublicationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.PublicationAreaScience", b =>
                {
                    b.HasOne("CitationUniSofia.Data.Model.AreaScience", "AreaScience")
                        .WithMany("PublicationsAreasScience")
                        .HasForeignKey("AreaScienceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CitationUniSofia.Data.Model.Publication", "Publication")
                        .WithMany("PublicationsAreasScience")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.PublicationCitation", b =>
                {
                    b.HasOne("CitationUniSofia.Data.Model.Citation", "Citation")
                        .WithMany("PublicationsCitations")
                        .HasForeignKey("CitationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CitationUniSofia.Data.Model.Publication", "Publication")
                        .WithMany("PublicationsCitations")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CitationUniSofia.Data.Model.PublicationMetadata", b =>
                {
                    b.HasOne("CitationUniSofia.Data.Model.Metadata", "Metadata")
                        .WithMany("PublicationsMetadata")
                        .HasForeignKey("MetadataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CitationUniSofia.Data.Model.Publication", "Publication")
                        .WithMany("PublicationsMetadata")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CitationUniSofia.Data.Model.CitationUniSofiaUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CitationUniSofia.Data.Model.CitationUniSofiaUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CitationUniSofia.Data.Model.CitationUniSofiaUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CitationUniSofia.Data.Model.CitationUniSofiaUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
